#!/bin/bash
export CLICOLOR=1
scpup2 () 
{ 
	if [ ! $1 ]; then
		echo "Usage: scpup2 sourcefile destinationfile"
		return 1
	elif [ ! $2 ]; then
		DEST=$(basename $1)
	else
		DEST=$2
    fi
	echo root@vwebsk.kmundp.de:~/$DEST
	return $?
    scp -r $1 root@vwebsk.kmundp.de:~/$DEST
}

# FileSearch
f() {
    touch "/var/log/find/$1.log"
    if [ $# -eq 1 ]; then
        find . -iname "*$1*" | tee -a "/var/log/find/$1.log"
    fi

    #find $SEARCHPATH -iname "*$1*" ${@:2}
    
    PARAM=$1
    f_it() {
        touch "/var/log/find/$PARAM.log"
        find "$@" -iname "*$PARAM*"  | tee -a "/var/log/find/$PARAM.log"
    }

    shift
    for fname in "$@"; do
        f_it "$fname"
    done


}
fpx() {
    SP='./'
    echo "$1"
    echo "$2"
    if [ -z $1 ]; then
        echo "-z $1 true"
    else
        echo "-z $1 false"
    fi
    if [ -z $2 ]; then
        echo "-z $2 true"
    else
        echo "-z $2 false"
    fi
    if [ -n $1 ]; then
        echo "-n $1 true"
    else
        echo "-n $1 false"
    fi
    if [ -n $2 ]; then
        echo "-n $2 true"
    else
        echo "-n $2 false"
    fi
}

fp() {
    SP='./'
    echo $#
    # PARAMCOUNT=$(($#+1))
    PARAMCOUNT=$#
    # PARAMCOUNT=$(($#-1))
    if [ -n $2 ]; then
        SP=$(abspath $2)
        PARAMCOUNT=3
    fi

    if [ $# -gt 2 ]; then
        _OPTION="-name"
    else
        _OPTION="-iname"
    fi

    if [ -n "$COLOR_Cyan" ] ; then
        printf "${COLOR_LightGreen}find ${COLOR_Yellow}$SP ${COLOR_Cyan}$_OPTION ${COLOR_LightCyan}\"*${COLOR_LightGreen}$1${COLOR_LightCyan}*\"${COLOR_NC} ${@:$PARAMCOUNT}"
    else
        echo "find $SP $_OPTION \"*$1*\" ${@:$PARAMCOUNT}"
    fi
    echo
    CMD=$(find $SP $_OPTION "*$1*"  | tee -a "/var/log/find/$1.log")
    printf "${COLOR_Cyan}$CMD"
}

param() {
    PC=2
    echo "count $#"
    echo "\$0 $0"
    echo "0 ${@:0}"
    echo "1 ${@:1}"
    echo "2 ${@:2}"
    echo "3 ${@:3}"
    echo "$PC ${@:PC}"
	echo "$1" ${@:2} -R . 
}

r() {
#    grep "$1" ${@:2} -R . 
    PARAM=$1
    r_it() {
        grep -irl $PARAM "$@"
    }

    shift
    for fname in "$@";
    do
        r_it "$fname"
    done


}

#mkdir and cd
mkcd() { mkdir -p "$@" && cd "$_"; }

opex() {
    xdg-open $1 &
}

alldoc() { 
    fmp_helperx() { 
        echo "$@"; 
    }

    for fname in "$@"; do 
        fmp_helperx "$fname";
    done  


    fmp_helper() { 
        echo "$@"; 
    }
}

fmp ()  {

    fmp2() { 
        nautilus "$@"; 
    };

    for fname in "$@";
    do         
        fmp2 "$fname";         
    done; 
}


chparam ()  {
    chparam2() {
        echo "$@";
    };
      
    for fname in "$@";
    do
        chparam2 "$fname";
    done;
}

 
chparam_a ()  {
    echo "$@";
    echo $1
    # shift
    # echo "1: ${@:1}";
    # echo "2: ${@:2}";
    echo "####################"
    chparam_a2() {
        echo "2: $(abspath $@)";
    };
                         
    # echo "for fname in `ls \"$@\"`";
    for fname in `ls "$@"`;
    do
        echo "$fname"
        chparam_a2 "$fname";
        echo "##########"
    done;
 }

checkfile() {
    if [ $# -eq 2 ];then
        COUNT=$1
    else
        COUNT=45
    fi

    checkfile_it() {
        while true;
        do 
            clear;
            tail -$COUNT "$@";
            sleep 1;
        done
    }

    if [ $# -eq 2 ];then
        shift
    fi
    for fname in "$@"
    do
        checkfile_it "$fname"
    done

}

sln() {
     ln -s `pwd`/$1 $2
}

lns() {
    OPT=''
    if [ -n $3 ]; then
        OPT=$3
    fi
    #ln -s$OPT `pwd`/$1 $2;
    ln -s$OPT "$PWD/$1" $2;
}

lna() {
    PARAM1="$1"
    PARAM2="$2"

    lna_it() {
        for file in `ls $1`; 
        do
            ln -s  $1/$file $2/$file;
        done
    }

    lna_it "$PARAM1" "$PARAM2"
}

show() { 
    #cat ~/unutmalist/*$1*;
    tail -n +1  ~/unutmalist/*$1*;
}

show2() {
    #cat ~/unutmalist/*$1*;
tail -n 1  ~/unutmalist/*$1*;
}

cheat() { 
    open http://borkware.com/quickies/one?topic=$1; 
}

gr2() {
    PARAM=$1
    r2_it() {
        grep -irl $PARAM "$@"
    }
    shift
    callfunction r2_it "$@"
}

callfunction() {
    $1 $2
}

testfunc2 ()
{
    echo "$# parameters";
    echo Using '$*';
    for p in $*;
    do
        echo "[$p]";
    done;
    echo Using '"$*"';
    for p in "$*";
    do
        echo "[$p]";
    done;
    echo Using '$@';
    for p in $@;
    do
        echo "[$p]";
    done;
    echo Using '"$@"';
    for p in "$@";
    do
        echo "[$p]";
    done
}

opentimedoc() {
    #echo "PID $$"
    #echo "\$1.length=${#1}"
    #[ ${#1} -ne 0 ] && [ -r $1 ]; echo $?
    export STANDARD_FOLDER=~/Documents/TaÌˆtigkeitsnachweis
    
    # getting the last edited excel sheet in the folder
    if [ ${#1} -ne 0 ] && [ -r $1 ]; then
        CURRENT_PATH=$1;
    elif [ "$1" == "-h" ]; then
        echo "usage: $FUNCNAME [<path to folder containing excel sheets>]"
        echo "Help: finds the last edited excel sheet in the folder"
        echo "      if no folder is given, then \"$STANDARD_FOLDER\" is used"
        return 0
    else
        CURRENT_PATH=$STANDARD_FOLDER
    fi
    CURRENT_DOC=$(ls -td $CURRENT_PATH/*.xls* 2> /dev/null | head -n 1)
    
    # check if there's found at least one
    NUM=$(ls $CURRENT_PATH/*.xls* 2> /dev/null | wc -l)
    if [ $NUM -eq 0 ]; then
    #if [ ! -f $CURRENT_PATH/*.xls* ]; then
        echo "No Excel Sheet found"
        echo "usage: $FUNCNAME [<path to folder containing excel sheet>]"
        echo
        return 1
    fi
    # when using only the folder without any wildcard expression: CURRENT_DOC=$(ls -td $CURRENT_PATH | head -n 1)
    # PATH2DOC=$CURRENT_PATH/$CURRENT_DOC
    # open sheet
    PATH2DOC=$CURRENT_DOC
    open /Applications/Microsoft\ Excel.app $PATH2DOC
}

manx() {
    echo $*
    /usr/bin/man $* > ~/temp.txt
    if [ -s ~/temp.txt ]; then 
        subl ~/temp.txt
    fi

}

giturlp() {
    PATH2REPO='.'
    if [ $# -eq 1 ]; then
        PATH2REPO="$@"
    fi

    cat $PATH2REPO/.git/config | grep -i url | cut -d'=' -f 2
}

androiddoc () { 
    open "http://android-docs.local/$1"; 
}
timestamp() {   date +"%s"; }
ymd() { date "+%Y%m%d"; }

# Xcode-Project: execute from the folder with the Assests.xxasset/ folder
extractImages() { 
    cp  *.imageset/*.$1 $2; 
}

# name of branch as parameter
lsgit() { 
    if [ ! $1 ]; then
         echo "Usage: lsgit branchname"
         return 1
     else
        git ls-tree -r $1 --name-only; 
     fi
}
# get a list of all files that ever existed
lsgitall() { 
    git log --pretty=format: --name-status | cut -f2- | sort -u; 
}
# NixOS
# https://stackoverflow.com/questions/1378274/in-a-bash-script-how-can-i-exit-the-entire-script-if-a-certain-condition-occurs

yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
trying() { "$@" || ([ $0 == "-bash" ] || dying "cannot $*") }

dying() {
    echo "cannot $*";
    sleep 1;
    die "$*"
}
function try()
{
    [[ $- = *e* ]]; SAVED_OPT_E=$?
    set +e
}

function throw()
{
    exit $1
}

function catch()
{
    export ex_code=$?
    (( $SAVED_OPT_E )) && set +e
    return $ex_code
}

function throwErrors()
{
    set -e
}

function ignoreErrors()
{
    set +e
}

activate_xcode_commands() {
    PATH=/Applications/Xcode.app/Contents/Developer/usr/bin:$PATH
}

reverse() {
    tail -r -n $(cat "$1" | wc -l) "$1"
}

hexcount() {
    for i in {0..15};do 
        if [ $i -eq 10 ]; then 
            i=A; 
        elif [ $i -eq 11 ]; then 
            i=B; 
        elif [ $i -eq 12 ]; then 
            i=C; 
        elif [ $i -eq 13 ]; then 
            i=D;  
        elif [ $i -eq 14 ]; then 
            i=E; 
        elif [ $i -eq 15 ]; then 
            i=F;  
        fi;
        echo "0x$i"; 
    done
}
    
realpathf() { 
    /usr/bin/python -c "import os,sys; print(os.path.realpath(sys.argv[1]))"     "$0"; 
}

if [ -f .urlencode ]; then
    . .urlencode
fi

inform()  { 
    echo -e "\\033[1;36m[INFO]\\033[0m  $*"; 
}
warn()  { 
    echo -e "\\033[1;33m[WARNING]\\033[0m  $*"; 
}
fatal() { 
    echo -e "\\033[1;31m[FATAL]\\033[0m  $*";
    echo "shell is about to get closed."
    echo "Exiting in 3 seconds"
    echo "CTRL-C to interrupt exiting"
    sleep 3; 
    #echo "boom...exit";
    exit 1 ; 
}

isNumber() {
     re='^[0-9]+$'
     #return  [[ $1 =~ $re ]]
     if ! [[ $1 =~ $re ]] ; then
         return 1
     else
         return 0
     fi
 }

 isNumeric() {
     #if [ "$1" -le 0 ] 2> /dev/null || [ "$1" -gt 0 ] 2> /dev/null;then
     if [ "$1" -eq "$1" ] 2> /dev/null; then
         return 0
     else
         return 1
     fi
 }

 isNaN() {
      if [ "$1" -le 0 ] 2> /dev/null || [ "$1" -gt 0 ] 2> /dev/null;then
          return 1
      else
          return 0
      fi
  }
ggg() { export fff=vedat; }

lsns() {
    [ -n "$1" ] && SP="$1" || SP="."
    [ -n "$2" ] && EXT="$2" || EXT=".*"
    find "$SP" -maxdepth 1 ! -type l | grep -e "$EXT$" 
}

first() { 
    ls -lhFaGtd * | head -n "$1" 
}

ffirst() {
     OPTIONS="-lhFaGtd"
     ls $OPTIONS * | head -n "$1"
 }

last() { 
    ls -lhFaGtd * | tail -n "$1" 
}
members () { 
    dscl . -list /Users | while read user; do 
        printf "$user "; 
        dsmemberutil checkmembership -U "$user" -G "$*"; 
    done | grep "is a member" | cut -d " " -f 1; 
} 

FileOrDirectory2 () {
	for i in "$@"
	do
		[ -d "$i" ] && echo "$i is directory" || echo "$i is file"
	done

#    for i in "${@}/*"
#    do
#        [ -d "$i" ] && echo "$i is directory" || echo "$i is file"
#    done
}

#for f in $(ls); do echo "bumm $f"; done
FileOrDirectory () {
    for i in $(ls $@)
     do
         [ -d "$i" ] && echo "$i is directory" || echo "$i is file"
     done
 }

isFile () {
    if [ -d "$1" ]
    then
        return 1
    else
        return 0
    fi
}

 isDirectory () {
     if [ -d "$1" ]
     then
         return 0
     else
         return 1
     fi
 }
dckrh () {
	COMMAND="$1" 
	docker $COMMAND --help
}

listarray() { 
    # listarray "$ARRAY" ; Don't forget the double quotes like in the sample
    pARRAY="$1"; 
    IFS=$'\n'; 
    echo "${pARRAY[@]}" 
}


listarray2() {
    pARRAY="$1";
    IFS=$'\n';
    echo "${pARRAY[*]}"
}
